version: '3'
services:
###################
  mongodb:
    build:
      context: mongo

    image: krishmint/rs-mongodb:${TAG}

    networks:
      - robot-shop
    logging: &logging   ## &logging is modularizing the logging part to use the same config later in script . 
      driver: "json-file"
      options:
        max-size: "25m"
        max-file: "2"
 ######################       
  redis:
    image: redis:6.2-alpine  ## fastest inmemory database used for caching
    networks:
      - robot-shop
    logging:
      <<: *logging
  #####################    
  rabbitmq:    ## use to decouple microservice by acting as a mediator and msg queing service
    image: rabbitmq:3.8-management-alpine
    networks:
      - robot-shop
    logging:
      <<: *logging
   ####################  
  catalogue:
    build:
      context: catalogue
    image: krishmint/rs-catalogue:${TAG}
    depends_on:
      - mongodb
    networks:
      - robot-shop
    healthcheck:  ## ensure the service is running
      test: [ "CMD", "curl", "-H", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
  ########################    
  user:
    build:
      context: user
    image: krishmint/rs-user:${TAG}
    depends_on:
      - mongodb
      - redis
    networks:
      - robot-shop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging

    ######################
  cart:
    build:
      context: cart
    image: krishmint/rs-cart:${TAG}
    depends_on:
      - redis
    networks:
      - robot-shop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
##############################
      
  mysql:
    build:
      context: mysql
    image: krishmint/rs-mysql-db:${TAG}
    cap_add:
      - NET_ADMIN
    networks:
      - robot-shop
    logging:
      <<: *logging
   #######################   
  shipping:
    build:
      context: shipping
    image: krishmint/rs-shipping:${TAG}
    depends_on:
      - mysql
    networks:
      - robot-shop
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging
###########################
      
  ratings:
    build:
      context: ratings
    image: krishmint/rs-ratings:${TAG}
    environment:
      APP_ENV: prod
    networks:
      - robot-shop
    depends_on:
      - mysql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/_health"]
      interval: 10s
      timeout: 10s
      retries: 3
    logging:
      <<: *logging

  ########################    
  payment:
    build:
      context: payment
    image: krishmint/rs-payment:${TAG}
    depends_on:
      - rabbitmq
    networks:
      - robot-shop
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 3
    # Uncomment to change payment gateway
    #environment:
      #PAYMENT_GATEWAY: "https://www.worldpay.com"
    logging:
      <<: *logging
      

  ########################    
  #dispatch:
    #build:
      #context: dispatch
    #image: ${REPO}/rs-dispatch:${TAG}
    #depends_on:
      #- rabbitmq
    #networks:
      #- robot-shop
    #logging:
      #<<: *logging
 #########################

  web:
    build:
      context: web
      #args:
        # agent key to download tracing libs
        #KEY: ${INSTANA_AGENT_KEY}

    image: krishmint/rs-web:${TAG}

    
    depends_on:
      - catalogue
      - user
      - shipping
      - payment
    ports:
      - "8080:8080"
    networks:
      - robot-shop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 10s
      timeout: 10s
      retries: 3
    # Uncomment to enable Instana EUM
    # environment:
      # INSTANA_EUM_KEY: <your eum key>
      # INSTANA_EUM_REPORTING_URL: <your reporting url>
    logging:
      <<: *logging

  #########################

networks:
  robot-shop:

